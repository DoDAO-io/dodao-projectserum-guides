uuid: c4103810-73b9-4789-afdb-37f2722da3d0
key: using-liquidity-pools
name: Using Liquidity Pool's API
content: Using Liquidity Pool's API
guideType: onboarding
created: "2022-08-02T04:15:13.911Z"
categories:
  - developer
thumbnail: https://d31h13bdjwgzxs.cloudfront.net/guides/sol/project-serum/liquidity_pools_api.png
publishStatus: Live
socialShareImage:
showIncorrectOnCompletion: true
steps:
  - uuid: 48dfb1a7-17d9-4614-ab3e-038720278950
    name: General Working of a Liquidity Pool
    content: |
      The Pool account is designed to hold assets. You can create a Pool account by sending in some assets. In return, you will 
      be given a Pool Token (T) which represents your partial ownership of the Pool.
      
      If you send in x% of the Pool's assets, the Pool will mint enough T tokens so that you have x% of the prior outstanding.
      You can redeem your T tokens to get back assets. However, if the Pool has changed since you created it, you
      might not get back exactly the same thing.
      
      If you have x% of all Pool Tokens, you are entitled to x% of the assets in the Pool (see below). When a Token is redeemed,
      it is burned.
      
      You can customize if and how the Pool can trade or rebalance its assets.
      
      This is what represents a pool state in Serum
      ```rust 
          pub struct PoolState {
            pub tag: PoolStateTag,
              
              /// Token mint account for the pool token.
            pub pool_token_mint: Address,
              /// Mint and vaults for the assets in the pool.
            pub assets: Vec<AssetInfo>,
              
              /// Mint authority for the pool token and owner for the assets in the pool.
            pub vault_signer: Address,
              /// Nonce used to generate `vault_signer`.
            pub vault_signer_nonce: u8,
              
              /// Additional accounts that need to be included with every request.
            pub account_params: Vec<ParamDesc>,
              
              /// User-friendly pool name.
            pub name: String,
              
              /// Vault for fees collected by the pool for LQD. Mint is the pool token mint.
            pub lqd_fee_vault: Address,
              /// Vault for fees collected by the pool for the pool initializer. Mint is the pool token mint.
            pub initializer_fee_vault: Address,
              
              /// Fee on creations and redemptions, per million tokens.
            pub fee_rate: u32,
              
              /// Meaning depends on the pool implementation.
            pub admin_key: Option<Address>,
            
            pub custom_state: Vec<u8>,
          }
            
          pub struct AssetInfo {
            pub mint: Address,
              /// Vault should be owned by `PoolState::vault_signer`
            pub vault_address: Address,
          }      
      ```
    stepItems: []
  - uuid: b9cecfde-62c0-4bd8-bc9a-0156a8329f92
    name: Evaluation
    content: |
    stepItems:
      - uuid: f16d2558-969f-4378-a0df-2c65081c22aa
        content: What do you get in return of sending assets to a Pool
        answerKeys:
          - B
        type: SingleChoice
        choices:
          - content: Voting Power
            key: A
          - content: Liquidity Pool Tokens(different from the assets) also commonly known as LP Tokens
            key: B
          - content: NFTs
            key: C
          - content: Souldbound Tokens
            key: D
      - uuid: f9bf06ac-796f-4b8b-a44d-3b797b7d3f69
        content: Which one of these is not a field in the Pool State?
        answerKeys:
          - C
        type: SingleChoice
        choices:
          - content: Mint authority for the pool token and owner for the assets in the pool.
            key: A
          - content: User-friendly pool name.
            key: B
          - content: Number of NFTs to mint
            key: C
          - content: Fee on creations and redemptions, per million tokens.
            key: D
  - uuid: debc6ed6-e798-42f0-a4e0-a34bfaf3f24a
    name: Pool Operations - Create pool tokens
    content: |
      When initializing the pool you need to  specify the creation basket for Pool Tokens. It takes N, the number of Pool Tokens you want to
      create, as an argument. It outputs the assets and quantities needed to create the N number of T tokens. You can also enter a fixed creation
      basket per T if you want. If you leave this blank, it defaults to `N / (total number of T)` * (full contents of basket).
      Note that the function can also return assets to the pool before returning the basket.
      
      For creations, the basket is the quantity of each asset that need to be sent to the pool to process the creation. For
      redemptions and swaps, the basket is the quantity of each asset that will be transferred from the pool to the user after
      the redemption or swap.
    
      When you create N number of tokens of type T:
      * P takes the creation basket for N, and mints you N of T
      * If you donâ€™t have the creation basket it fails
      
      ```js
        import { Account, Connection, PublicKey } from '@solana/web3.js';
        import { loadPoolInfo, PoolTransactions } from '@project-serum/pool';
        import BN from 'bn.js';
        
        let connection = new Connection('...');
        let poolAddress = new PublicKey('...'); // Address of the pool.
        let payer = new Account('...'); // Account to pay for solana fees.
        
        let poolInfo = await loadPoolInfo(connection, poolAddress);
        let { transaction, signers } = PoolTransactions.execute(
          poolInfo,
          {
          // Number of tokens to create.
          create: new BN(100),
          },
          {
            // Spl-token account to send the created tokens.
            poolTokenAccount: new PublicKey('...'),
            // Spl-token accounts to pull funds from.
            assetAccounts: [new PublicKey('...'), new Public('...')],
            // Owner of poolTokenAccount and assetAccounts.
            owner: payer.publicKey,
          },
          // Expected creation cost.
          [new BN(10), new BN(10)],
        );
        await connection.sendTransaction(transaction, [payer, ...signers]);
      ```
    stepItems: []
  - uuid: ba2106d8-c458-4def-a2b5-ecd6580f0eb8
    name: Evaluation
    content: |
    stepItems:
      - uuid: 69b2a34b-3a27-477d-b1aa-e548d0454ef4
        content: Which on these best defines a basket while creating a pool?
        answerKeys:
          - D
        type: SingleChoice
        choices:
          - content: Basket contains all the owners of the pool
            key: A
          - content: Basket is defines by the number of liquidity tokens to mint
            key: B
          - content: Basket is the wrapper which contains all the transactions needed to create the pool
            key: C
          - content: Basket is the quantity of each asset that need to be sent to the pool to process the creation
            key: D
      - uuid: 519b0d05-7553-486f-a98c-2d2196cd5bc7
        content: Which of these is used to create pool with tokens?
        answerKeys:
          - B
        type: SingleChoice
        choices:
          - content: |
              Code Snippet A
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to use for initialization.
                      initialize: new BN(100),
                    },
                ```
            key: A
          - content: |
              Code Snippet B
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to create.
                      create: new BN(100)
                    },
                ```
            key: B
          - content: |
              Code Snippet C
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to redeem.
                      redeem: new BN(100),
                    },
                ```
            key: C
          - content: |
              Code Snippet D
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to use for setum.
                      setup: new BN(100),
                    },
                ```
            key: D
  - uuid: 8b10742a-e771-41e8-bd6a-afa2223cb423
    name: Pool Operation - Get pool basket
    content: |
      Use [`getPoolBasket()`](https://project-serum.github.io/serum-ts/pool/modules/_index_.html#getpoolbasket)
      to fetch the current pool basket (the quantity of each token needed to create N pool tokens
      or the quantity of each token received for redeeming N pool tokens).

      Negative quantities will cause tokens to be transferred in the opposite direction.
      ```js
        import { Connection, PublicKey } from '@solana/web3.js';
        import { loadPoolInfo, getPoolBasket } from '@project-serum/pool';
        import BN from 'bn.js';
        
        let connection = new Connection('...');
        let poolAddress = new PublicKey('...'); // Address of the pool.
        
        let poolInfo = await loadPoolInfo(connection, poolAddress);
        let basket = await getPoolBasket(
        connection,
        poolInfo,
        { create: new BN(100) },
        // Arbitrary SOL address, can be anything as long as it has nonzero SOL
        // and is not a program-owned address.
        new PublicKey('...'),
        );
        
        console.log(basket);
      ```
    stepItems: []
  - uuid: 495579ef-b56b-4009-9bf1-dbd27c65bc98
    name: Pool Operations - Redeem pool tokens
    content: |
      Liquidity providers can redeem their LP tokens against the liquidity pool to receive the original pair of tokens 
      back, a process called withdrawing liquidity. The amount of the two tokens to be redeemed is decided by the 
      percentage share of the liquidity pool they hold, and the ratio is determined by that of these tokens in the 
      liquidity pool at the time.
      
      When you redeem N of T:
      * Pool burns N of T
      * Pool returns the redemption basket for N of T to you

      Send a transaction to redeem pool tokens:
      ```js
        import { Account, Connection, PublicKey } from '@solana/web3.js';
        import { loadPoolInfo, PoolTransactions } from '@project-serum/pool';
        import BN from 'bn.js';
  
        let connection = new Connection('...');
        let poolAddress = new PublicKey('...'); // Address of the pool.
        let payer = new Account('...'); // Account to pay for solana fees.
  
        let poolInfo = await loadPoolInfo(connection, poolAddress);
        let { transaction, signers } = PoolTransactions.execute(
          poolInfo,
          {
            // Number of tokens to redeem.
            redeem: new BN(100),
          },
          {
            // Spl-token account to pull the pool tokens to redeem from.
            poolTokenAccount: new PublicKey('...'),
            // Spl-token accounts to send the redemption proceeds.
            assetAccounts: [new PublicKey('...'), new Public('...')],
            // Owner of poolTokenAccount and assetAccounts.
            owner: payer.publicKey,
          },
          // Expected redemption proceeds.
          [new BN(10), new BN(10)],
        );
        await connection.sendTransaction(transaction, [payer, ...signers]);
      ```
    stepItems: []
  - uuid: 639c2ec2-7ce6-484f-8e7e-fe5a11d1d01e
    name: Evaluation
    content: |
    stepItems:
      - uuid: 10816ad3-e857-488b-98de-6d6c8943d7b6
        content: Which on these best defines a basket while redemption a pool?
        answerKeys:
          - C
        type: SingleChoice
        choices:
          - content: Basket contains all the owners of the pool
            key: A
          - content: Basket is defines by the number of liquidity tokens to mint
            key: B
          - content: For redemptions, the basket is the quantity of each asset that will be transferred from the pool to the user after the redemption.
            key: C
          - content: Basket is the wrapper which contains all the transactions needed to create the pool
            key: D
      - uuid: 3af40d0b-2200-455e-9a55-6ab52a9cce94
        content: Which of these is used to redeem pool with tokens?
        answerKeys:
          - C
        type: SingleChoice
        choices:
          - content: |
              Code Snippet A
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to use for initialization.
                      initialize: new BN(100),
                    },
                ```
            key: A
          - content: |
              Code Snippet B
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to create.
                      create: new BN(100)
                    },
                ```
            key: B
          - content: |
              Code Snippet C
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to redeem.
                      redeem: new BN(100),
                    },
                ```
            key: C
          - content: |
              Code Snippet D
                ```javascript
                    PoolTransactions.execute(
                    poolInfo,
                    {
                      // Number of tokens to use for setum.
                      setup: new BN(100),
                    },
                ```
            key: D
  - uuid: e752a300-448e-4060-be0b-276c58e7c006
    name: Your Info
    content: |
    stepItems:
      - uuid: 037ef15d-3ff3-4f2a-a46d-2f2fc589caca
        label: Nick Name
        required: true
        type: PublicShortInput
      - uuid: 980afdbb-7520-46c4-959b-3065169d3cac
        type: UserDiscordConnect
