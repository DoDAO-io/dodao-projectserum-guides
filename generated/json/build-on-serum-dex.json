{
  "uuid": "a6e0c0ae-569d-4e28-8733-7490ad3a88dc",
  "key": "build-on-serum-dex",
  "name": "Build on Serum's Dex",
  "content": "Explains how devs can build on top of Project Serum's DEX",
  "guideType": "onboarding",
  "created": "2022-08-02T04:15:13.911Z",
  "categories": [
    "developer"
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/guides/sol/project-serum/build_on_serum.png",
  "publishStatus": "Live",
  "socialShareImage": null,
  "showIncorrectOnCompletion": true,
  "steps": [
    {
      "uuid": "9fec9d86-adbb-4959-bebe-f7ac619a0309",
      "name": "Introduction",
      "content": "Serum is a decentralized exchange that anyone in the world can open an account on almost instantly. All you need is an\ninternet connection and computer, and with some crypto assets you're ready to trade with anyone on the planet. Serum is\na decentralized open source project that everyone can contribute to building. Project Serum is built by the Serum\nFoundation - the foundation is a group of experts in cryptocurrencies trading and decentralized finance.\n\nSerum's JavaScript Library `@project-serum/serum` is useful for interacting with the DEX Smart Contracts. `@project-serum/serum`\nmakes it easier to program on top of Serum DEX by abstracting out complex logic, which makes it simpler for other applications\nto integrate or build on top of Serum DEX.\n\nDeFi projects often face the challenge of attracting enough liquidity to keep the protocol/product running. However, by\nbuilding on top of Serum's DEX, applications can tap into a deep pool of liquidity. Serum's DEX enables many different\ntypes of applications, including advanced financial marketplaces and borrow lending.\n\nThis guide explains how you can call various methods of `@project-serum/serum` to\n1) Fetch the market data\n2) Fetch all the order book data\n3) Fetch open order of a particular account\n4) Place a new order on order book\n5) Cancel an order\n6) Retrieve filled orders\n7) Settle the funds within various user accounts used in DEX\n",
      "stepItems": []
    },
    {
      "uuid": "20b342a6-93c3-4156-ad7b-52864b59fcd2",
      "name": "Evaluation",
      "content": "",
      "stepItems": [
        {
          "uuid": "08852962-8c5b-46ed-8856-e9d7b7430caf",
          "content": "What are the benefits of using `@project-serum/serum` library?",
          "answerKeys": [
            "D"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "All the complex code to interact with Serum DEX is abstracted out into easy to use Javascript library",
              "key": "A"
            },
            {
              "content": "It makes it easy for the programmers to interact with Serum DEX.",
              "key": "B"
            },
            {
              "content": "Different UI applications can use `@project-serum/serum` and build application on top of Serum DEX.",
              "key": "C"
            },
            {
              "content": "All the above",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "48a36bbc-a7c9-4b36-a9ea-054aaba2edd1",
          "content": "Which of these operations can be performed by using `@project-serum/serum` library?",
          "answerKeys": [
            "A",
            "B",
            "D"
          ],
          "type": "MultipleChoice",
          "choices": [
            {
              "content": "Fetch open order of a particular account",
              "key": "A"
            },
            {
              "content": "Place a new order on order book",
              "key": "B"
            },
            {
              "content": "Interact with Solidity Smart Contracts",
              "key": "C"
            },
            {
              "content": "Retrieve filled orders",
              "key": "D"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b3068b72-8c56-4b99-be5b-05b19f1f64bc",
      "name": "Pull Market and Order Book information",
      "content": "You would need market address and program address for connecting to the Serum DEX. Market and program id can be found\nfrom [https://github.com/project-serum/serum-js/blob/master/src/markets.json](https://github.com/project-serum/serum-js/blob/master/src/markets.json)\n\nBelow code explains how you can load a market and its data\n```javascript\n  import { Account, Connection, PublicKey } from '@solana/web3.js';\n  import { Market } from '@project-serum/serum';\n  \n  let connection = new Connection('https://testnet.solana.com');\n  let marketAddress = new PublicKey('...');\n  let programAddress = new PublicKey(\"...\");\n  let market = await Market.load(connection, marketAddress, {}, programAddress);\n  \n  // Fetching orderbooks\n  let bids = await market.loadBids(connection);\n  let asks = await market.loadAsks(connection);\n  // L2 orderbook data\n  for (let [price, size] of bids.getL2(20)) {\n    console.log(price, size);\n  }\n  // Full orderbook data\n  for (let order of asks) {\n    console.log(\n    order.orderId,\n    order.price,\n    order.size,\n    order.side, // 'buy' or 'sell'\n    );\n  }\n```\n",
      "stepItems": []
    },
    {
      "uuid": "898ac414-fb9c-4a4f-bf00-637b88db1d73",
      "name": "Evaluation",
      "content": "",
      "stepItems": [
        {
          "uuid": "ff5b37c3-978a-48e9-8aad-fa7c632cc79e",
          "content": "What information peices do you need to be able to connect to Serum DEX?",
          "answerKeys": [
            "D"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "Network Url i.e. `https://testnet.solana.com`",
              "key": "A"
            },
            {
              "content": "Market Address",
              "key": "B"
            },
            {
              "content": "Program Address/Id",
              "key": "C"
            },
            {
              "content": "All the above",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "0d25ff30-47a3-4c97-a6b1-ded313247edf",
          "content": "Which of these helps in pulling Order Books from Serum?",
          "answerKeys": [
            "B"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "`await market.fetchAll(connection)`",
              "key": "A"
            },
            {
              "content": "`await market.loadBids(connection)` and `await market.loadAsks(connection)`",
              "key": "B"
            },
            {
              "content": "`await market.getSerumMarket(connection)`",
              "key": "C"
            },
            {
              "content": "None of the above",
              "key": "D"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b62b486d-f306-4d54-9a79-aa1f6dd68e39",
      "name": "Placing an order",
      "content": "Users can place an order by submitting a Place Order instruction to the DEX program. To do so, they must provide the \nfollowing information:\n- Order details: the market, size, price, order type, side\n- Their OpenOrders account on that market\n- Their SPL token account for the market’s base currency (if selling) or quote currency (if buying)\n\n`@project-serum/serum` simplifies the placement of new order and saves us from getting into the complexity of passing\nparameters like open order account etc.\n\n```javascript\n  // Placing orders\n  let owner = new Account('...');\n  let payer = new PublicKey('...'); // spl-token account\n  await market.placeOrder(connection, {\n    owner,\n    payer,\n    side: 'buy', // 'buy' or 'sell'\n    price: 123.45,\n    size: 17.0,\n    orderType: 'limit', // 'limit', 'ioc', 'postOnly'\n  });\n  ```\n",
      "stepItems": []
    },
    {
      "uuid": "48c98f9b-fda1-4c78-94af-a21b32121a23",
      "name": "Evaluation",
      "content": "",
      "stepItems": [
        {
          "uuid": "32bfdb96-cd58-4802-9a71-cde7f4d3f30f",
          "content": "Which information is not needed while pacing the limit order?",
          "answerKeys": [
            "C"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "side - buy or sell",
              "key": "A"
            },
            {
              "content": "price",
              "key": "B"
            },
            {
              "content": "gas fee",
              "key": "C"
            },
            {
              "content": "size",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "412f9979-5e75-4dea-a840-d3268d378b57",
          "content": "Which of these is not a valid order type?",
          "answerKeys": [
            "B"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "limit",
              "key": "A"
            },
            {
              "content": "exchange",
              "key": "B"
            },
            {
              "content": "ioc",
              "key": "C"
            },
            {
              "content": "postOnly",
              "key": "D"
            }
          ]
        }
      ]
    },
    {
      "uuid": "78c91d59-099b-4006-aaf6-5374cc5c6824",
      "name": "Cancelling and order",
      "content": "Cancellation takes in an order (which includes the slot number and Order ID) adds an event to cancel it to the Event Queue.\n\nThe Order ID is a unique identifier that is used to determine the price-time priority of an order. It is a 128-bit\nnumber, with the first 64 bits representing the price and the second 64 bits representing the sequence number. If\nthe order is a buy order, all of the bits in the second half of the number are flipped.\n\n\n```javascript\n  // Retrieving open orders by owner\n  let myOrders = await market.loadOrdersForOwner(connection, owner.publicKey);\n  \n  // Cancelling orders\n  for (let order of myOrders) {\n    await market.cancelOrder(connection, owner, order);\n  }    \n```\n",
      "stepItems": []
    },
    {
      "uuid": "fdecacd2-1724-4773-a478-5ba9dffbff13",
      "name": "Evaluation",
      "content": "",
      "stepItems": [
        {
          "uuid": "bb4d63d2-432c-487d-92b9-8ebab870e5ac",
          "content": "Select the correct code snippet which allows cancelling the order?",
          "answerKeys": [
            "A"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "`await market.cancelOrder(connection, owner, order);`",
              "key": "A"
            },
            {
              "content": "`await market.cancelNow(connection, owner, order);`",
              "key": "B"
            },
            {
              "content": "`await market.cancel(connection, owner, order);`",
              "key": "C"
            },
            {
              "content": "None of the above",
              "key": "D"
            }
          ]
        }
      ]
    },
    {
      "uuid": "394add16-da51-47f1-bf8e-a8072bc19f2a",
      "name": "Retrieving filled orders and Settling funds",
      "content": "After the trade has been made the \"Fill\" events are fired. When a Fill event is found, the total balance of the OpenOrders account \nis decreased by the quantity paid. The total and free balances of the OpenOrders account are increased by the quantity received. \nThe Market's total fees paid counter increments by the quantity of fees paid.\n\nThe settlement instruction settles the funds of the user from their OpenOrders account to their SPL token accounts for the base and quote \ncurrency. The user will sign with the “owner” keypair, which is the same key that was used for placing orders. The \nruntime will then use a cross program invocation to move funds from the Base Currency Vault and Quote Currency \nVault to the provided SPL token accounts. This is equal to the free balance amount in the OpenOrders for each \ncurrency.\n\n```javascript\n// Retrieving fills\nfor (let fill of await market.loadFills(connection)) {\n  console.log(fill.orderId, fill.price, fill.size, fill.side);\n}\n\n// Settle funds\nfor (let openOrders of await market.findOpenOrdersAccountsForOwner(\n  connection,\n  owner.publicKey,\n)) {\n  if (openOrders.baseTokenFree > 0 || openOrders.quoteTokenFree > 0) {\n    // spl-token accounts to which to send the proceeds from trades\n    let baseTokenAccount = new PublicKey('...');\n    let quoteTokenAccount = new PublicKey('...');\n\n    await market.settleFunds(\n      connection,\n      owner,\n      openOrders,\n      baseTokenAccount,\n      quoteTokenAccount,\n    );\n  }\n}\n```\n",
      "stepItems": []
    },
    {
      "uuid": "aeca7b4e-b484-4c23-a402-820df5cef8dc",
      "name": "Evaluation",
      "content": "",
      "stepItems": [
        {
          "uuid": "b870640c-c71d-442c-aee3-fc8183f6197b",
          "content": "Which event is fired when a tade is made in Serum?",
          "answerKeys": [
            "C"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "TradeSuccess",
              "key": "A"
            },
            {
              "content": "OrderFilled",
              "key": "B"
            },
            {
              "content": "Fill",
              "key": "C"
            },
            {
              "content": "None of the above",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "e74bc232-b3b2-45ed-9b09-343b4473fa7d",
          "content": "Select the correct statement regarding settlement of funds after a successful trade?",
          "answerKeys": [
            "C"
          ],
          "type": "SingleChoice",
          "choices": [
            {
              "content": "The settlement instruction settles the funds of the user from their Order Book to their SPL token accounts",
              "key": "A"
            },
            {
              "content": "The settlement instruction settles the funds of the user from their OpenOrders account to their Order Book Account",
              "key": "B"
            },
            {
              "content": "The settlement instruction settles the funds of the user from their SPL token accounts to their OpenOrders account",
              "key": "C"
            },
            {
              "content": "The settlement instruction settles the funds of the user from their OpenOrders account to their SPL token accounts",
              "key": "D"
            }
          ]
        }
      ]
    },
    {
      "uuid": "1b25a4de-d9ef-4584-b958-01483f878890",
      "name": "Your Info",
      "content": "",
      "stepItems": [
        {
          "uuid": "034c90ca-0cd5-42ea-92ba-210ead9c9d04",
          "label": "Nick Name",
          "required": true,
          "type": "PublicShortInput"
        },
        {
          "uuid": "7563b802-89d6-4665-84e0-eab26461c2c2",
          "type": "UserDiscordConnect"
        }
      ]
    }
  ]
}